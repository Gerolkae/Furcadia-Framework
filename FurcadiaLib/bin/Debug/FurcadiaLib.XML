<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FurcadiaLib</name>
    </assembly>
    <members>
        <member name="T:Furcadia.Base220">
            <summary>
            
            </summary>
        </member>
        <member name="T:Furcadia.Util">
            <summary>
            Utility class with helper functions.
            </summary>
        </member>
        <member name="P:Furcadia.Util.Host">
            <summary>
            Gets or sets the Furcadia server host (i.e lightbringer.furcadia.com).
            </summary>
        </member>
        <member name="P:Furcadia.Util.Ip">
            <summary>
            Gets or sets the IP of the Furcadia server.
            (Note(7/22/2010): Do not use this.  The IP may be wrong.
            Use Furcadia.Util.Host instead.
            </summary>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.#ctor(System.String,System.String[])">
            <summary>
            A http web request 
            </summary>
            <param name="url">Url (i.e http://on.furcadia.com) or if you have a custom online check server use that instead</param>
            <param name="shortN_friends">Friends (shortname) (i.e emeraldflame instead of Emerald|Flame)</param>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.Connect">
            <summary>
            Connects to the online check server and sends a online check request 
            </summary>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.ConnectAsync">
            <summary>
            Connects asynchronously to the online check server and sends a request without affecting the executing thread.
            </summary>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.AddFriend(System.String)">
            <summary>
            Adds a friend to a list of friends.
            Throws a Exception on non alphanumeric string.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/>
            </param>
            <returns>
            A <see cref="T:System.Boolean"/>.
            True if successfully added friend name.
            False if name already added.
            </returns>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.CheckFriendNames">
            <summary>
            Iterates through friend's names to make sure they are valid alpha numeric (a-z0-9).
            </summary>
            <returns>True: All friends names are fine.  False otherwise.</returns>
        </member>
        <member name="M:Furcadia.Net.PounceConnection.CheckFriendName(System.String)">
            <summary>
            Checks a friend's name to make sure it is a valid alpha numeric (a-z0-9).
            </summary>
            <returns>True: Friend name is fine.  False otherwise.</returns>
        </member>
        <member name="P:Furcadia.Net.PounceConnection.RawResponse">
            <summary>
            When a response from the server is recieved this property will contain
            the raw HTTP string.
            </summary>
        </member>
        <member name="P:Furcadia.Net.PounceConnection.TotalFurresOnline">
            <summary>
            Total online Furre count retrieved from a online check request
            </summary>
        </member>
        <member name="E:Furcadia.Net.PounceConnection.Response">
            <summary>
            Called when a online check request sends a response.  First argument is a list of players online.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Furcadia.IO.UserFileAccessRights" -->
        <member name="M:Furcadia.IO.UserFileAccessRights.getWindowsIdentity">
            <summary>
            Simple accessor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furcadia.IO.UserFileAccessRights.getPath">
            <summary>
            Simple accessor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Furcadia.IO.UserFileAccessRights.#ctor(System.String)">
            <summary>
            Convenience constructor assumes the current user
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Furcadia.IO.UserFileAccessRights.#ctor(System.String,System.Security.Principal.WindowsIdentity)">
            <summary>
            Supply the path to the file or directory and a user or group. 
            Access checks are done
            during instantiation to ensure we always have a valid object
            </summary>
            <param name="path"></param>
            <param name="principal"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Furcadia.IO.UserFileAccessRights.ToString" -->
        <member name="M:Furcadia.IO.UserFileAccessRights.contains(System.Security.AccessControl.FileSystemRights,System.Security.AccessControl.FileSystemAccessRule)">
            <summary>
            Convenience method to test if the right exists within the given rights
            </summary>
            <param name="right"></param>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="F:Furcadia.Net.NetProxy.BUFFER_CAP">
            <summary>
            Max buffer size
            </summary>
        </member>
        <member name="F:Furcadia.Net.NetProxy.UseProxyIni">
            <summary>
            Use proxy.ini if it exists. otherwise use settings.ini.
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetProxy.SetProcess(System.String)">
            <summary>
            Sets the startup Process to the associated file. (default: %FurcadiaInstallPath%/Furcadia.exe)
            </summary>
            <param name="file">Process full path and file name.</param>
        </member>
        <member name="M:Furcadia.Net.NetProxy.Connect">
            <summary>
            Connects to the Furcadia Server and starts the mini proxy.
            </summary>
        </member>
        <member name="M:Furcadia.Net.NetProxy.Kill">
            <summary>
            Terminates the connection.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.Connected">
             <summary>
            This is triggered when the 
             </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ServerDisConnected">
             <summary>
            This is triggered when the Server Disconnects
             </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ClientDisConnected">
             <summary>
            This is triggered when the Client Disconnects
             </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ServerData">
            <summary>
            This is triggered when the Server sends data to the client.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ClientData">
            <summary>
            This is triggered when the Client sends data to the server.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.ClientExited">
            <summary>
            This is triggered when the user has exited/logoff Furcadia and the Furcadia
            client is closed.
            </summary>
        </member>
        <member name="E:Furcadia.Net.NetProxy.Error">
            <summary>
            This is triggered when a handled Exception is thrown.
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.Process">
            <summary>
            Process to start. (default: Furcadia.exe)
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.ProcessPath">
            <summary>
            Process path (default: none)
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.ProcessCMD">
            <summary>
            Command to pass (default: -pick)
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.IsServerConnected">
            <summary>
            Proxy is connected, or not.
            </summary>
        </member>
        <member name="P:Furcadia.Net.NetProxy.StandAloneMode">
            <summary>
            Standalone Mode
            Keep Connection after Client Closes/Disconnects
            </summary>
        </member>
        <member name="T:Furcadia.Net.DREAM">
            <summary>
            Current Dream information
            </summary>
        </member>
        <member name="F:Furcadia.Net.DREAM.List">
            <summary>
            Dream List
            Furcadia requires Clients to handle thier own Dream Lists
            See http://dev.furcadia.com/docs New Movement for Spawn and Remove packets
            **Spawn is out dated. 
              New information requires a 4byte for AFK flag at the end
            </summary>
        </member>
        <member name="T:Furcadia.Net.Movement">
            <summary>
            Furcadia reconmended Material to support thier Protocol Standards
            </summary>
        </member>
        <member name="P:Furcadia.Drawing.Graphics.Palette.Default">
            <summary>
            title261.pcx
            </summary>
        </member>
        <member name="T:Furcadia.Settings">
            <summary>
            A simple way to load settings whether from ini or xml.
            </summary>
        </member>
        <member name="F:Furcadia.Settings.sPath">
            setting path
            setting file
            setting fields
        </member>
        <member name="M:Furcadia.Settings.InitializeFurcadiaSettings">
            Load and Store settings.ini with backup
        </member>
        <member name="M:Furcadia.Settings.RestoreFurcadiaSettings">
            restore from backup settings.ini
        </member>
        <member name="M:Furcadia.Settings.Load``1(System.String)">
            <summary>
            Loads a xml file and returns a new instance of T. T must be Xml Deserializable!
            </summary>
            <typeparam name="T"></typeparam>
            <param name="file"></param>
            <returns>Default of T (default(T)) on file not found.  Else it returns a instance of T.</returns>
        </member>
        <member name="M:Furcadia.Settings.Load(System.String)">
            <summary>
            Loads an ini file and returns a key/value pair of values.
            (Note: It reads Key=Value pairs only.)
            (Add: Also the ini must be proper, one key/value per line. No section garbage.)
            </summary>
            <param name="file"></param>
            <returns>A new Hashtable, or a empty Hashtable on file not found.</returns>
        </member>
        <member name="T:Furcadia.IO.Paths">
            <summary>
            Contains functions for getting some base paths related to Furcadia.
            </summary>
        </member>
        <member name="M:Furcadia.IO.Paths.GetFurcadiaDocPath">
            <summary>
            Gets the location of the Furcadia folder located in "My Documents"
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing the location of Furcadia folder in "My Documents".
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetRegistryPath">
            <summary>
            Determines the registry path by platform. (x32/x64)
            Thanks to Ioka for this one.
            </summary>
            <returns>
            A path to the Furcadia registry folder or NullReferenceException.
            </returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetInstallPath">
            <summary>
            Find the path to Furcadia data files currently installed on this
            system.
            </summary>
            <returns>Path to the Furcadia program folder or null if not found/not installed.</returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetDefaultPatchPath">
            <summary>
            Find the path to the default patch folder on the current machine.
            </summary>
            <returns>Path to the default patch folder or null if not found.</returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetLocalSettingsPath">
            <summary>
            Get the path to the Local Settings directory for Furcadia.
            </summary>
            <returns>Furcadia local settings directory.</returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetCachePath">
            <summary>
            Get the All Users Application Data path for Furcadia.
            </summary>
            <returns>All Users Application Data path for Furcadia.</returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetDynAvatarPath">
            <summary>
            Get the All Dynamic Avatar path for Furcadia.
            </summary>
            <returns>All Dynamic Avatar path for Furcadia.</returns>
        </member>
        <member name="M:Furcadia.IO.Paths.GetLocaldirPath">
            <summary>
            Find the current localdir path where data files would be stored
            on the current machine.
            </summary>
            <returns>Path to the data folder from localdir.ini or null if not found.</returns>
        </member>
        <member name="M:Furcadia.Drawing.Helper.CharToDescTag(System.Char)">
            <summary>
            Converts a Char to Desc Tag
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Furcadia.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Furcadia.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Furcadia.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:Furcadia.IO.IniParser.#ctor(System.String)">
            <summary>
            Opens the INI file at the given path and enumerates the values in the IniParser.
            </summary>
            <param name="iniPath">Full path to INI file.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.GetSetting(System.String,System.String)">
            <summary>
            Returns the value for the given section, key pair.
            </summary>
            <param name="sectionName">Section name.</param>
            <param name="settingName">Key name.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.EnumSection(System.String)">
            <summary>
            Enumerates all lines for given section.
            </summary>
            <param name="sectionName">Section to enum.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.AddSetting(System.String,System.String,System.String)">
            <summary>
            Adds or replaces a setting to the table to be saved.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
            <param name="settingValue">Value of key.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.AddSetting(System.String,System.String)">
            <summary>
            Adds or replaces a setting to the table to be saved with a null value.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.DeleteSetting(System.String,System.String)">
            <summary>
            Remove a setting.
            </summary>
            <param name="sectionName">Section to add under.</param>
            <param name="settingName">Key name to add.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.SaveSettings(System.String)">
            <summary>
            Save settings to new file.
            </summary>
            <param name="newFilePath">New file path.</param>
        </member>
        <member name="M:Furcadia.IO.IniParser.SaveSettings">
            <summary>
            Save settings back to ini file.
            </summary>
        </member>
        <member name="M:Furcadia.IO.FurcIni.SetUserSetting(System.String,System.String,System.String[])">
            <summary>
            sets feilds in the FurcSettings array
            </summary>
            <param name="file"></param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Furcadia.IO.FurcIni.GetUserSetting(System.String,System.String[])">
            <summary>
            Retrieves a feild setting in the FurcSettings array
            </summary>
            <param name="file"></param>
            <returns>Value</returns>
        </member>
        <member name="T:Furcadia.Net.NetMessage">
            <summary>
            Default.
            </summary>
        </member>
    </members>
</doc>
